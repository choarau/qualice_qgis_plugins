# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ApplicationStyle
                                 A QGIS plugin
 Application d'un style Ã  une couche vectorielle
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-03
        git sha              : $Format:%H$
        copyright            : (C) 2020 by MAMA
        email                : mathilde.segaud@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QSize
from qgis.PyQt.QtGui import QIcon, QColor, QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, Qgis, QgsMapLayer, QgsRectangle, QgsLayerTree


from qgis.core import (
    QgsGeometry,
    QgsMapSettings,
    QgsPrintLayout,
    QgsMapSettings,
    QgsMapRendererParallelJob,
    QgsLayoutItemLabel,
    QgsLayoutItemLegend,
    QgsLayoutItemMap,
    QgsLayoutItemPolygon,
    QgsLayoutItemScaleBar,
    QgsLayoutExporter,
    QgsLayoutItem,
    QgsLayoutPoint,
    QgsLayoutSize,
    QgsUnitTypes,
    QgsProject,
    QgsFillSymbol,
)

from qgis.PyQt.QtGui import (
    QPolygonF,
    QColor,
)

from qgis.PyQt.QtCore import (
    QPointF,
    QRectF,
    QSize,
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .application_style_dialog import ApplicationStyleDialog
import os.path
from qgis.utils import iface

class ApplicationStyle:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ApplicationStyle_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Application Style')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ApplicationStyle', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/application_style/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Application style'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Application Style'),
                action)
            self.iface.removeToolBarIcon(action)
   
    def select_input_file(self):
        file, test = QFileDialog.getOpenFileName(self.dlg)
        self.dlg.lineEdit.setText(file)
        
    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
        self.dlg, "Fichier de sortie ","", '*.png;;*.pdf')
        self.dlg.lineEdit_2.setText(filename)
        

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ApplicationStyleDialog()
            self.dlg.pushButton.clicked.connect(self.select_input_file)
            self.dlg.pushButton_2.clicked.connect(self.select_output_file)
        
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous run
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
        # Style file path recovery
        filename_style = self.dlg.lineEdit.text()
        filename_output = self.dlg.lineEdit_2.text()
        if result:
            # Retrieving the index of the selected layer
            selectedLayerIndex = self.dlg.comboBox.currentIndex()
            
            # Selection of the layer thanks to the index
            selectedLayer = layers[selectedLayerIndex].layer()
            
            # Style application
            selectedLayer.loadNamedStyle(filename_style)
            
            selectedLayerName = selectedLayer.name()
            ## EXPORT LAYOUT ##
            
                #test4
             # Add a map with layers to the layout
            layers = QgsProject.instance().mapLayersByName(selectedLayerName)
            layer = layers[0]
            
            project = QgsProject.instance()
            manager = project.layoutManager()
            layoutName = 'Layout1'
            layouts_list = manager.printLayouts()
            # remove any duplicate layouts
            for layout in layouts_list:
                if layout.name() == layoutName:
                    manager.removeLayout(layout)
            layout = QgsPrintLayout(project)
            layout.initializeDefaults()
            layout.setName(layoutName)
            manager.addLayout(layout)
            
            # create map item in the layout
            map = QgsLayoutItemMap(layout)
            map.setRect(20,20,20,20)
            
            # set a map extent
            ms = QgsMapSettings()
            ms.setLayers([layer]) # set layers to be mapped
            rect = QgsRectangle(ms.fullExtent())
            rect.scale(1.0)
            ms.setExtent(rect)
            map.setExtent(rect)
            layout.addLayoutItem(map) # add map to the layout
            
            map.attemptMove(QgsLayoutPoint(5,20,QgsUnitTypes.LayoutMillimeters))
            map.attemptResize(QgsLayoutSize(180,180,QgsUnitTypes.LayoutMillimeters))
            
            # Add a legend
            legend = QgsLayoutItemLegend(layout)
            legend.setTitle("Legend")
            layerTree = QgsLayerTree()
            layerTree.addLayer(layer)
            #legend.model().setRootGroup(layerTree)
            layout.addLayoutItem(legend)
            legend.attemptMove(QgsLayoutPoint(200,15,QgsUnitTypes.LayoutMillimeters))
            
            #Add a scalebar
            scalebar = QgsLayoutItemScaleBar(layout)
            scalebar.setStyle('Line Ticks Up') # let's people choose in the menu of the plugin for the next version
            scalebar.setUnits(QgsUnitTypes.DistanceKilometers)
            scalebar.setNumberOfSegments(4)
            scalebar.setNumberOfSegmentsLeft(0)
            scalebar.setUnitsPerSegment(0.5)
            scalebar.setLinkedMap(map)
            scalebar.setUnitLabel('km')
            scalebar.setFont(QFont('Arial',14))
            scalebar.update()
            layout.addLayoutItem(scalebar)
            scalebar.attemptMove(QgsLayoutPoint(220,190,QgsUnitTypes.LayoutMillimeters))
            
            #Add a title
            title = QgsLayoutItemLabel(layout)
            title.setText('Titre')
            title.setFont(QFont('Arial',24))
            title.adjustSizeToText()
            layout.addLayoutItem(title)
            title.attemptMove(QgsLayoutPoint(10,5,QgsUnitTypes.LayoutMillimeters))
            
            # Export a map layout
            layout = manager.layoutByName(layoutName)
            exporter = QgsLayoutExporter(layout)
            if '.png' in filename_output:
                exporter.exportToImage(filename_output, QgsLayoutExporter.ImageExportSettings())
            elif '.pdf' in filename_output:
                exporter.exportToPdf(filename_output, QgsLayoutExporter.PdfExportSettings())
                

            self.iface.messageBar().pushMessage(
            "Success", "worked",
                level=Qgis.Success, duration=3)
