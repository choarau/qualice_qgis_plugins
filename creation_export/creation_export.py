# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreationEtExport
                                 A QGIS plugin
 Ce plugin permet de créer un projet QGIS pré-configuré et d'exporter des illustrations automatiquement.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-06
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Mathilde
        email                : mathilde.segaud@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QPushButton

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .creation_export_dialog import CreationEtExportDialog
import os.path

from qgis.core import (
    QgsProject,
    Qgis,
    QgsMapLayer,
    QgsRectangle,
    QgsLayerTree,
    QgsVectorLayer,

)
from qgis.gui import (
    QgsLayerTreeMapCanvasBridge,
    QgsMessageBar,
    
)
from qgis.utils import iface
from io import StringIO, BytesIO

import os
import os.path
from lxml import etree
import xml.etree.ElementTree as ET

class CreationEtExport:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CreationEtExport_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Creation et export')
        
        

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CreationEtExport', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/creation_export/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Créér un projet ou exporter'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Creation et export'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_project(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, " ","*.qgs")
        self.dlg.lineEdit_6.setText(filename)
    
    def select_input_construction(self):
        directory_name = QFileDialog.getExistingDirectory(self.dlg)
        self.dlg.lineEdit.setText(directory_name)
        
    def select_input_SHP_Monde(self):
        directory_name = QFileDialog.getExistingDirectory(self.dlg)
        self.dlg.lineEdit_5.setText(directory_name)
    
    def select_input_styles(self):
        directory_name = QFileDialog.getExistingDirectory(self.dlg)
        self.dlg.lineEdit_4.setText(directory_name)
    
    def select_input_DAP(self):
        directory_name = QFileDialog.getExistingDirectory(self.dlg)
        self.dlg.lineEdit_2.setText(directory_name)
    
    # def select_checkBox_pleiade(self):
    #     if QCheckBox.isTristate()==True:
    #         return "pleiade"         
    def create_parametersFile_IMPORT(self,tree, root,main_path, type_import,tag ):
       """ Remplis les differentes sous parties de la balise <project_import>
           
           Entree :
               main_path : type str
                   correspond au chemin du dossier necessaire a la recuperation du chemin de la couche
               type_import : type str
                   correspond au type d'import : layer ou style
               tag : type str
                   correspond à la balise que l'on veut remplir
       
       """
       if type_import == "layers":
           
           #parcours des sous-balises
           for noeud in root[2][0].findall(tag):
               #pour chaque sous-balise on ajoute un element path
               relative_path = noeud.get('path')
               #construction du chemin absolue pour acceder au dossier des couches
               path_1 = os.path.join(main_path,relative_path)
               #recuperation de la liste des fichiers
               list_files = os.listdir(path_1)
               layer_exist = ""
               #parcours les fichiers
               for file in list_files:
                   #si le fichier repond aux criteres de la sous-balise :
                   # - creation d'un sous-element path qui contient le chemin absolu de la couche
                   # - remplissage de l'attribut nom de la sous-balise correspondant au nom de la couche (=du fichier)
                   if noeud.get('filter') in file and noeud.get('contain')in file:
                       path_2 = etree.SubElement(noeud, "path")
                       p = os.path.join(path_1,file)
                       path_2.text =  os.path.normpath(p) 
                       layer_exist += path_2.text
                       if "SHP_Monde" in path_2.text:
                          name = file.replace(".shp","")
                       else:
                          name = noeud.get("contain")
                          name = name.replace(".","")
                       noeud.set("layer_name",name)
               if layer_exist=="":
                   root[2][0].remove(noeud)
                       
                       
       else:
           
           for noeud in root[2][1].findall(tag):
               relative_path = noeud.get('path')
               path_1 = os.path.join(main_path,relative_path)
               list_files = os.listdir(path_1)
               for file in list_files:
                  style = etree.SubElement(noeud, "style")
                  name = file.replace(".qml","")
                  style.set("style_name",name)
                  style.set("id","")
                  path_2 = etree.SubElement(style, "path")
                  p = os.path.join(path_1,file)
                  path_2.text =  os.path.normpath(p) 
                
    def create_parametersFile_PARAMETERS(self,tree, root, path_carto_mondiale,path_dap, path_style, path_construction, source_satellite_image):
        """ Remplis les differentes sous parties de la balise <project_properties>
            
            Entree :
                path_carto_mondiale : type str
                    correspond au chemin du dossier contenant les couches de la carte mondiale
                path_dap : type str
                    correspond au chemin du dossier des DAP
                path_style : type str
                    correspond au chemin du dossier des styles
                path_construction : type str
                    correspond au chemin du dossier du chantier
                origin_satellite_image : type str
                    correspond a l'origine des images : SPOT ou PHR
        
        """
        tree_path = "/project_creation/project_properties"
        name_projet = ""
        for noeud in tree.xpath(tree_path+"/name"):
            noeud.text = os.path.basename(path_construction)
            name_projet += noeud.text + ".qgs"
        for noeud in tree.xpath(tree_path+"/path_project"):
            path_proj_relative= os.path.join("3_QUALIF_CALIX\QGIS", name_projet)
            noeud.text = os.path.join(path_construction,path_proj_relative)
        for noeud in tree.xpath(tree_path+"/construction/path_construction"):
            noeud.text = path_construction
        if path_style!=False:
            for noeud in tree.xpath(tree_path+"/other_dir/style_dir"):
                noeud.text = path_style
        if path_carto_mondiale!=False:
            for noeud in tree.xpath(tree_path+"/other_dir/worldmap_dir"):
                noeud.text = path_carto_mondiale
        if path_dap!=False:
            for noeud in tree.xpath(tree_path+"/other_dir/dap_dir"):
                noeud.text = path_dap
        for noeud in tree.xpath(tree_path+"/source_satellite_image"):
            noeud.text = source_satellite_image
            
    def recuperation_path_import(self,layer_name, root):
        """Recupere le chemin d'une couche grace à son nom
        
        Entree : 
            layer_name : type str
            correspond à l'attribut layer_name pour les parties structure et import
       
        Sortie :
            path : type str
            correspond au chemin absolu de la couche
        """
        for layer in root[2][0].getchildren():
            if layer.get("layer_name")==layer_name:
                path = layer.find('path').text
                return path

    def recuperation_path_style(self,style_name, root):
        """Recupere le chemin d'un style grace à son nom
        
        Entree : 
            style_name : type str
            correspond à l'attribut style_name pour les parties structure et import
       
        Sortie :
            path : type str
            correspond au chemin absolu du style
        """
        for style_gr in root[2][1].getchildren():
            for style in style_gr.getchildren():
                if style.get("style_name")==style_name:
                    path = style.find('path').text
                    return path
                
    def source_img(self, name):
        """Recupere le nom de la source des images"""
        layer = root[0].find('source_satellite_image')
        source_img = layer.text
        response = "yes"
        if source_img != "PLEIADE/SPOT":
            if name != source_img:
                response = "no"
        return response
    

        
    def loading_layers(self, tree, root, project):
        """Chargement des couches et application des styles
        """
        root_proj = project.layerTreeRoot()
        
        for group in root[1].findall('layer_group'):
            groupe = root_proj.addGroup(group.get('value'))
            #creation du groupe
            if group.getchildren()!= []:
                #si le groupe possede des sous-element
                
                for layer in group.getchildren():
                    #recuperation pour toutes les couches 
                    layer_name = layer.get('layer_name')
                    style_name = layer.get('style_name')
                    path_layer = self.recuperation_path_import(layer_name, root)
                    path_style = self.recuperation_path_style(style_name, root)
                    if not path_layer:
                        layer.getparent().remove(layer)
                    else:
                        if os.path.exists(path_layer):
                            name = layer.find('name').text
                            layer = QgsVectorLayer(path_layer,name) 
                            layer.loadNamedStyle(path_style)
                            project.addMapLayer(layer, False)
                            groupe.addLayer(layer)   
                            iface.mapCanvas().refresh()
        
        
        
    def data_verification_dir_construction(self, data):
        """Verification du bon remplissage du champ Dossier du chantier de l'interface
         
        Entree:
            data : type str
            correspond au chemin d'accès du chantier
            
        Sortie:
            renvoie une erreur critique si les conditions ne sont pas remplies avec un message
        """
        if not data:
            iface.messageBar().pushMessage("Erreur", "Le champ du dossier de chantier est vide, il n'a pas été rempli", level=Qgis.Critical)
        else:
            if os.path.exists(data):
                self.dlg.textBrowser_3.append("Le chemin d'accès "+data+" est valide")
            else:
                iface.messageBar().pushMessage("Erreur", "Le chemin d'accès du dossier du chantier n'existe pas", level=Qgis.Critical)
                
    def data_verification_dir(self, data):
        """Verification du bon remplissage des autres champs de l'interface
         
        Entree:
            data : type str
            correspond au chemin d'accès du dossier correspondant
            
        Sortie:
            renvoie une erreur critique si les conditions ne sont pas remplies avec un message
        """
        if not data[1]:
            text =  "Le champ du dossier "+data[0]+" est vide, il n'a pas été rempli"
            iface.messageBar().pushMessage("Erreur",text, level=Qgis.Warning)
            self.dlg.textBrowser_3.append( "Le champ du dossier "+data[0]+" est vide")
            return False
        else:
            if os.path.exists(data[1]):
                self.dlg.textBrowser_3.append("Le chemin d'accès "+data[0]+" est valide")
                return True
            else:
                iface.messageBar().pushMessage("Erreur", "Le chemin d'accès du dossier "+os.path.basename(data[1])+" n'existe pas", level=Qgis.Warning)
                self.dlg.textBrowser_3.append( "Le chemin d'accès du dossierr "+os.path.basename(data[1])+" n'existe pas")
                return False
            
    def run_1(self):
        # REMPLI
        #initialisation de l'arbre du fichier .xml
        #camino = os.path.abspath(.fichier_parametre_creation_projet_2.xml)
        #tree = etree.parse(r'C:\Users\segau\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\creation_export\fichier_parametre_creation_projet_2.xml')
        tree = etree.parse(os.path.join(self.plugin_dir,"fichier_configuration_1.xml"))
        root = tree.getroot()
    
        #parametres qui seront fournis par l'interface
        
        path_carto_mondiale = ["SHP_Monde",self.dlg.lineEdit_5.text()]
        path_dap = ["données d'appui du chantier",self.dlg.lineEdit_2.text()]
        path_style =["Styles_QGIS",self.dlg.lineEdit_4.text()]
        path_construction = self.dlg.lineEdit.text()
        self.data_verification_dir_construction(path_construction)
        if self.data_verification_dir(path_carto_mondiale)==True:
            self.create_parametersFile_IMPORT(tree, root, path_carto_mondiale[1],"layers","layer_background" )
        else:
            path_carto_mondiale[1]=False
        if self.data_verification_dir(path_dap)==True:
            self.create_parametersFile_IMPORT(tree, root, path_dap[1],"layers","layer_DAP" )
        else:
            path_dap[1]=False
        if self.data_verification_dir(path_style)==True:
            self.create_parametersFile_IMPORT(tree, root, path_style[1],"style", "styles" )
        elif self.data_verification_dir(path_style)==False:
            path_style[1]=False
        
            
        source_satellite_image = "PHR"
        
        #remplissage du .xml
        
        #partie parametres du projet
        self.create_parametersFile_PARAMETERS(tree, root, path_carto_mondiale[1],path_dap[1],path_style[1], path_construction, source_satellite_image)
        
        #partie import du projet
        
        self.create_parametersFile_IMPORT(tree, root, path_construction,"layers", "layer" )
        
        #creation d'un nouveau fichier parametre
        #tree.write(r"C:\Users\segau\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\creation_export\fichier_param2.xml")
        tree.write(os.path.join(self.plugin_dir,"fichier_config_resultat.xml"))
        
        # LIT
        tree = etree.parse(os.path.join(self.plugin_dir,"fichier_config_resultat.xml"))

        root = tree.getroot()
        #recuperation_path_style('Style_Perf')
         # Create a project
        project = QgsProject.instance()
        color = QColor(166, 206, 227,255)
        project.setBackgroundColor(color)
        self.loading_layers(tree, root, project)
        for lyr in project.mapLayers().values():
            if lyr.name() == "EMPRISE_PU_CHANTIER":
                iface.mapCanvas().setExtent(lyr.extent())
                iface.mapCanvas().refresh()
        pass
            
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CreationEtExportDialog()
            self.dlg.pushButton.clicked.connect(self.select_input_construction)
            self.dlg.pushButton_1.clicked.connect(self.select_input_DAP)
            self.dlg.pushButton_5.clicked.connect(self.select_input_SHP_Monde)
            self.dlg.pushButton_6.clicked.connect(self.select_input_styles)
            self.dlg.pushButton_7.clicked.connect(self.select_output_project)
            self.dlg.pushButton_3.clicked.connect(self.run_1)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        #result = self.dlg.pushButton_3.exec_()
        
        # creation = QPushButton(self.dlg.pushButton_3)
        # result =  creation.pressed()  
        # See if OK was pressed
        # if result==True:
        #     #initialisation de l'arbre du fichier .xml
        #     tree = etree.parse(r"fichier_parametre_creation_projet_2.xml")
        #     root = tree.getroot()
        
        #     #parametres qui seront fournis par l'interface
        #     path_carto_mondiale = self.dlg.lineEdit_5.text()
        #     path_dap = self.dlg.lineEdit_2.text()
        #     path_style = self.dlg.lineEdit_4.text()
        #     path_construction = self.dlg.lineEdit.text()
        #     source_satellite_image = "PHR"
            
        #     #remplissage du .xml
            
        #     #partie parametres du projet
        #     create_parametersFile_PARAMETERS(tree, root, path_carto_mondiale,path_dap, path_style, path_construction, source_satellite_image)
            
        #     #partie import du projet
        #     create_parametersFile_IMPORT(tree, root, path_carto_mondiale,"layers","layer_background" )
        #     create_parametersFile_IMPORT(tree, root, path_dap,"layers","layer_DAP" )
        #     create_parametersFile_IMPORT(tree, root, path_style,"style", "styles" )
        #     create_parametersFile_IMPORT(tree, root, path_construction,"layers", "layer" )
            
        #     #creation d'un nouveau fichier parametre
        #     tree.write(r"fichier_param2.xml")
        #     # Do something useful here - delete the line containing pass and
        #     # substitute with your code.
        #     pass
#self.progressChanged.connect(self.progress.setValue)
        # self.progress.setMaximum(100)
        # self.progress.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        # self.progressMessageBar.layout().addWidget(self.progress)
        # self.message_bar_item = iface.messageBar().pushWidget(self.progressMessageBar,
        #                                                       Qgis.Info)